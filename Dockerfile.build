# Use Node v18
FROM node:18.16.0-slim as base

# RUN apt-get update && apt-get install -y --install-recommends util-linux

FROM base as install
WORKDIR /app
COPY package.json .
COPY yarn.lock .
ENV GATSBY_TELEMETRY_DISABLED=1

# BRANCH 1

# Static Site Generator / Static File Builder
# we need ONLY the dependencies from package.json
FROM install AS prod
# we avoid unintented updates to yarn.lock by using --frozen-lockfile
# this is helpful since we force the user's yarn.lock into the image
# and the build process does not know whether the lock was produced in the same env as this on
RUN yarn install --frozen-lockfile --production=true && yarn cache clean

# Copy Code / Config / Text Data
COPY src src
COPY gatsby-config.ts .
COPY gatsby-node.ts .
COPY tsconfig.json .
COPY babel.config.js .
COPY README.md .
COPY data.yaml .
COPY data-portfolio.yml .


# PROD SUB BRANCH 1.1
# BUILD (bundle) into "static" files ready to serve. Static files include
# minified code (ie webpack html/css/js bundle) built on server (SSR) for the
# content to display, but also site 'metadata' such as sitemap.xml, robots.txt
FROM prod as build
COPY scripts/generate-robots-file.sh .
COPY scripts/build-production-bundle.sh .
ENTRYPOINT [ "sh", "/app/build-production-bundle.sh", "/app/public/robots.txt" ]

# Example
# docker build -f Dockerfile.build --target build -t me/ssg-builder .
# docker run -it --rm -v /data/repos/static-site-generator/public-container:/app/public me/ssg-builder
# cd /data/repos/static-site-generator
# rm -rf ./public/*
# cp ./public-container/* ./public/


# PROD SUB BRANCH 1.2

FROM prod as serve_files
RUN yarn build
COPY scripts/generate-robots-file.sh .
RUN ./generate-robots-file.sh /app/public/robots.txt

RUN rm public/sitemap-index.xml
RUN mv public/sitemap-0.xml public/sitemap.xml

EXPOSE 9000
CMD [ "yarn", "serve", "-H", "0.0.0.0" ]
# SERVE the "static" files on localhost
# Example
# docker build -f Dockerfile.build --target serve_files -t me/file-server .
# docker run -it --rm -v /data/repos/static-site-generator/:/app -p 9000:9000 me/file-server


# PROD SUB BRANCH 1.3

# Run development server
FROM prod AS dev_server
# VSCode debug ports: 9929 9230
EXPOSE 8000 9929 9230
CMD [ "yarn", "develop", "--host", "0.0.0.0", "--verbose" ]


# BRANCH 2
# Dev Operations, Testing, Type Check, Linting

# we need EXTRA dependencies from devDependencies in package.json
FROM install AS dev
# we avoid unintented updates to yarn.lock by using --frozen-lockfile
RUN yarn install --frozen-lockfile --production=false && yarn cache clean
# Copy Code/Files
COPY src src
COPY gatsby-config.ts .
COPY gatsby-node.ts .
COPY README.md .
COPY tsconfig.json .
COPY data.yaml .
COPY data-portfolio.yml .
COPY .eslintrc.cjs .
COPY babel.config.js .

ENV STORYBOOK_DISABLE_TELEMETRY=1


FROM dev as type_check
CMD [ "yarn", "typecheck" ]

FROM dev as type_check_live
CMD [ "yarn", "typecheck-live" ]

FROM dev as test
ENV NODE_ENV=test
COPY jest.config.ts .
COPY jest-preprocess.js .
COPY loadershim.js .
# COPY __mocks__ __mocks__  # if uncomment, then check ./dockerignore
CMD [ "yarn", "test" ]

FROM dev as eslint
CMD [ "yarn", "eslint", "." ]


FROM dev AS storybook
COPY .storybook/ .storybook/

ENV STORYBOOK_DISABLE_TELEMETRY=1

# we run 'storybook dev -p 6006'
CMD [ "yarn", "storybook" ]

# Example 1
# docker build -t ssg-storybook -f Dockerfile.build --target storybook .
# docker run -it --rm -p 6006:6006 ssg-storybook