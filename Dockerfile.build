# Use Node v18
FROM node:18.16.0-slim as base

# RUN apt-get update && apt-get install -y --install-recommends util-linux


FROM base as install
WORKDIR /app
COPY package.json .
COPY yarn.lock .
RUN yarn install --frozen-lockfile --production=true && yarn cache clean

# Copy Code/Files

FROM install as codebase

COPY src src
COPY gatsby-config.ts .
COPY gatsby-node.ts .
COPY README.md .
COPY tsconfig.json .

FROM codebase as build
ENV GATSBY_TELEMETRY_DISABLED=1

CMD [ "yarn", "build" ]


FROM build as dev_codebase
COPY .eslintrc.cjs .

# Run development server
FROM dev_codebase as dev
# VSCode debug ports: 9929 9230
EXPOSE 8000 9929 9230
CMD [ "yarn", "develop", "-H", "0.0.0.0" ]




FROM dev_codebase as type_check
CMD [ "yarn", "typecheck" ]


FROM dev_codebase as test
ENV NODE_ENV=test
COPY babel.config.js .
COPY jest.config.ts .
COPY jest-preprocess.js .
COPY loadershim.js .
COPY __mocks__ __mocks__
CMD [ "yarn", "test" ]


FROM dev_codebase as eslint
CMD [ "yarn", "eslint", "." ]



# BUILD into "static" files, aka bundle (eg webpack output)
# Example
# docker build -f Dockerfile.build --target build -t me/ssg-builder .
# docker run -it --rm -v /data/repos/static-site-generator/public-container:/app/public me/ssg-builder

# cd /data/repos/static-site-generator
# rm -rf ./public/*
# cp ./public-container/* ./public/
FROM build as serve_files
RUN yarn build
EXPOSE 9000
CMD [ "yarn", "serve", "-H", "0.0.0.0" ]

# SERVE the "static" files on localhost
# Example
# docker build -f Dockerfile.build --target serve_files -t me/file-server .
# docker run -it --rm -v /data/repos/static-site-generator/:/app -p 9000:9000 me/file-server

