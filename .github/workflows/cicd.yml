# CI/CD Pipeline for Gatsby/TS project, in GitHub Actions

# Test -> Build -> Deploy

# Triggers
on:
  push:
    branches:
      - "*"
    tags:
      - v*

env:

  ##### JOB ON/OFF SWITCHES - Top Level overrides #####
  UNIT_TESTS_ON: "true"
  LINT_ON: "false"
  BUILD_ON: "true"
  PUBLISH_ON: "true"
  DEPLOY_ON: "true"
  ##########################

  #### 2nd Level overrides ####
  ALWAYS_LINT: "false"
  ALWAYS_BUILD: "false"

  ## Pipe Settings ##
  ALLOW_lINT_TO_FAIL: "true"

jobs:
  pipe_config:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Pipeline
        id: set_pipe_config
        run: |
          echo UNIT_TESTS_ON="${{ env.UNIT_TESTS_ON }}" >> $GITHUB_OUTPUT
          echo LINT_ON="${{ env.LINT_ON }}" >> $GITHUB_OUTPUT
          echo PUBLISH_ON="${{ env.PUBLISH_ON }}" >> $GITHUB_OUTPUT
          echo ALLOW_lINT_TO_FAIL="${{ env.ALLOW_lINT_TO_FAIL }}" >> $GITHUB_OUTPUT
          echo DEPLOY_ON="${{ env.DEPLOY_ON }}" >> $GITHUB_OUTPUT
    outputs:
      # Output Top Level overides
      UNIT_TESTS_ON: ${{ steps.set_pipe_config.outputs.UNIT_TESTS_ON }}
      LINT_ON: ${{ steps.set_pipe_config.outputs.LINT_ON }}
      PUBLISH_ON: ${{ steps.set_pipe_config.outputs.PUBLISH_ON }}
      DEPLOY_ON: ${{ steps.set_pipe_config.outputs.DEPLOY_ON }}

      # Pipeline Configuration
      ALLOW_lINT_TO_FAIL: ${{ steps.set_pipe_config.outputs.ALLOW_lINT_TO_FAIL }}

### TEST ###
  test:
    needs: pipe_config
    if: needs.pipe_config.outputs.UNIT_TESTS_ON == 'true'
    runs-on: ubuntu-latest
    env:
      # Host location root directory where Coverage Results are stored after Test Suite runs
      HOST_COVERAGE_DIR: ${{ github.workspace }}/coverage
    steps:
      - uses: actions/checkout@v4

      # https://github.com/actions/setup-node?tab=readme-ov-file#caching-global-packages-data
      - uses: actions/setup-node@v4
        with:
          node-version: '18.16.x'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'
          # token: ''   # add custom issued token for better rate-limiting

      - name: Install Dependencies
        run: yarn install --frozen-lockfile --production=false

      - name: Run Tests
        run: yarn test

      - name: Set CODE COVERAGE CI ARTIFACT name
        if: always()
        id: set_coverage_artifact_name
        run: echo COVERAGE_ARTIFACT="coverage" >> $GITHUB_OUTPUT

      # CI ARTIFACTS - Code Coverage
      - name: Upload Test Coverage results as CI Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          # name under which to upload the Artifact(s) and later reference them
          name: ${{ steps.set_coverage_artifact_name.outputs.COVERAGE_ARTIFACT }}
          # Path to the file/folder to upload
          path: ${{ env.HOST_COVERAGE_DIR }}
          if-no-files-found: error
    outputs:
      COVERAGE_ARTIFACT: ${{ steps.set_coverage_artifact_name.outputs.COVERAGE_ARTIFACT }}

# COVERAGE HOST
  codecov:
    needs: test
    uses: ./.github/workflows/codecov.yml
    # as long as test was triggered, we run codecov. both when Test PASSed or FAILed
    if: always() && ${{ !contains(fromJSON('["skipped", "cancelled"]'), needs.test.result) }}
    with:
      coverage_ci_artifact: ${{ needs.test.outputs.COVERAGE_ARTIFACT }}
      file_prefix: clover
    secrets:
      # leverages repository secret CODECOV_TOKEN
      CODECOV_TOKEN: ${{ secrets.DOCKER_PASSWORD }}

## BUILD MINIFIED BUNDLE
  build:
    # needs: [test]
    uses: ./.github/workflows/build-bundle.yml
    if: always()
    with:
      ci_artifact: web_bundle

# Test Web Bundle
  test_bundle:
    needs: build
    uses: ./.github/workflows/test-bundle.yml
    with:
      bundle_ci_artifact: web_bundle
      bundle_size: ${{ needs.build.outputs.BUNDLE_SIZE }}
      bundle_size_acceptance: 3

  signal_deploy:
    needs: test_bundle
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    uses: ./.github/workflows/signal-deploy.yml
    with:
      main_branch: main
      release_branch: release

  # Deploy Web Bundle
  # deploy:
  #   # runs if test_bundle ran and passed AND git ref is v* tag
  #   needs: [pipe_config, signal_deploy]
  #   if: ${{ needs.pipe_config.outputs.DEPLOY_ON == 'true' && needs.signal_deploy.outputs.AUTOMATED_DEPLOY == 'true' }}
  #   uses: ./.github/workflows/deploy.yml
  #   with:
  #     ci_artifact:


  lint:
    needs: pipe_config
    if: needs.pipe_config.outputs.LINT_ON == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # https://github.com/actions/setup-node?tab=readme-ov-file#caching-global-packages-data
      - uses: actions/setup-node@v4
        with:
          node-version: '18.16.x'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'
          # token: ''   # add custom issued token for better rate-limiting

      - name: Install Dependencies
        run: yarn install --frozen-lockfile --production=false

      - name: Run ESlint against all code
        run: |
          eslint_pass_boolean_flag=1

          # set flag to 0 if eslint fails
          yarn eslint || eslint_pass_boolean_flag=0

          if [ $eslint_pass_boolean_flag -eq 1 ]; then
            echo "[INFO] Code Lint PASSED!"
          else
            echo "[ERROR] Code Lint FAILED!"
          fi

          if [ $eslint_pass_boolean_flag -eq 1 ]; then
            job_status=0
          else
            if [ ${{ needs.pipe_config.outputs.ALLOW_lINT_TO_FAIL }} == "true" ]; then
              echo "[WARN] Lint failed but ALLOW_lINT_TO_FAIL is true"
              job_status=0
            else
              echo "[ERROR] Lint failed and ALLOW_lINT_TO_FAIL is false"
              job_status=1
            fi
          fi
          echo "Exiting with status code: $job_status"
          exit $job_status






  # test_old:
  #   # needs caching to compete in speed with setup-node cache
  #   # INVESTIGATE how to combine cache and docker images

  #   needs: pipe_config
  #   # if: needs.pipe_config.outputs.UNIT_TESTS_ON == 'true'
  #   runs-on: ubuntu-latest
  #   env:
  #     # Host location root directory where Coverage Results are stored after Test Suite runs
  #     HOST_COVERAGE_DIR: ${{ github.workspace }}/coverage
  #   steps:
  #     - uses: actions/checkout@v4

  #     - run: echo TEST_IMAGE_NAME="test-image" >> $GITHUB_ENV

  #     # package provides dockerized headless test, and a make frontend target
  #     - name: Build Docker Image for running Tests
  #       run: docker build -f Dockerfile.build --target test -t ${TEST_IMAGE_NAME} .

  #     - name: Run Unit Tests
  #       # run: make test
  #       run: docker run -t --rm -v ${{ env.HOST_COVERAGE_DIR }}:/app/coverage -v ${PWD}/__tests__:/app/__tests__ ${TEST_IMAGE_NAME}
  #       # Now, the ./coverage folder should contain
  #       # lcov-report/
  #       # coverage-final.json
  #       # lcov.info
  #       # clover.xml

  #     - name: Set CODE COVERAGE CI ARTIFACT name
  #       if: always()
  #       id: set_coverage_artifact_name
  #       run: echo COVERAGE_ARTIFACT="coverage" >> $GITHUB_OUTPUT

  #     # CI ARTIFACTS - Code Coverage
  #     - name: Upload Test Coverage results as CI Artifacts
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         # name under which to upload the Artifact(s) and later reference them
  #         name: ${{ steps.set_coverage_artifact_name.outputs.COVERAGE_ARTIFACT }}
  #         # Path to the file/folder to upload
  #         path: ${{ env.HOST_COVERAGE_DIR }}
  #         if-no-files-found: error
  #   outputs:
  #     COVERAGE_ARTIFACT: ${{ steps.set_coverage_artifact_name.outputs.COVERAGE_ARTIFACT }}
