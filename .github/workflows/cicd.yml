# CI/CD Pipeline for Gatsby/TS project, in GitHub Actions

# Test -> Build -> Deploy

# Triggers
on:
  push:
    branches:
      - "*"
    tags:
      - v*

env:

  ##### JOB ON/OFF SWITCHES - Top Level overrides #####
  UNIT_TESTS_ON: "true"
  LINT_ON: "true"
  PUBLISH_ON: "true"
  ##########################

  #### 2nd Level overrides ####
  ALWAYS_LINT: "false"

  ## Pipe Settings ##
  ALLOW_lINT_TO_FAIL: "true"

jobs:
  pipe_config:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Pipeline
        id: set_pipe_config
        run: |
          echo UNIT_TESTS_ON="${{ env.UNIT_TESTS_ON }}" >> $GITHUB_OUTPUT
          echo LINT_ON="${{ env.LINT_ON }}" >> $GITHUB_OUTPUT
          echo PUBLISH_ON="${{ env.PUBLISH_ON }}" >> $GITHUB_OUTPUT
          echo ALLOW_lINT_TO_FAIL="${{ env.ALLOW_lINT_TO_FAIL }}" >> $GITHUB_OUTPUT
    outputs:
      # Output Top Level overides
      UNIT_TESTS_ON: ${{ steps.set_pipe_config.outputs.UNIT_TESTS_ON }}
      LINT_ON: ${{ steps.set_pipe_config.outputs.LINT_ON }}
      PUBLISH_ON: ${{ steps.set_pipe_config.outputs.PUBLISH_ON }}

      # Pipeline Configuration
      ALLOW_lINT_TO_FAIL: ${{ steps.set_pipe_config.outputs.ALLOW_lINT_TO_FAIL }}

  test:
    needs: pipe_config
    # if: needs.pipe_config.outputs.UNIT_TESTS_ON == 'true'
    runs-on: ubuntu-latest
    env:
      # Host location root directory where Coverage Results are stored are Test Suite runs
      HOST_COVERAGE_DIR: ${{ github.workspace }}/coverage
    steps:
      - uses: actions/checkout@v4

      - run: echo TEST_IMAGE_NAME="test-image" >> $GITHUB_ENV

      # package provides dockerized headless test, and a make frontend target
      - name: Build Docker Image for running Tests
        run: docker build -f Dockerfile.build --target test -t ${TEST_IMAGE_NAME} .

      - name: Run Unit Tests
        # run: make test
        run: docker run -t --rm -v ${{ env.HOST_COVERAGE_DIR }}:/app/coverage -v ${PWD}/__tests__:/app/__tests__ ${TEST_IMAGE_NAME}
        # Now, the ./coverage folder should contain
        # lcov-report/
        # coverage-final.json
        # lcov.info
        # clover.xml

      - name: Set CODE COVERAGE CI ARTIFACT name
        if: always()
        id: set_coverage_artifact_name
        run: echo COVERAGE_ARTIFACT="coverage" >> $GITHUB_OUTPUT

      # CI ARTIFACTS - Code Coverage
      - name: Upload Test Coverage results as CI Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          # name under which to upload the Artifact(s) and later reference them
          name: ${{ steps.set_coverage_artifact_name.outputs.COVERAGE_ARTIFACT }}
          # Path to the file/folder to upload
          path: ${{ env.HOST_COVERAGE_DIR }}
          if-no-files-found: error
    outputs:
      COVERAGE_ARTIFACT: ${{ steps.set_coverage_artifact_name.outputs.COVERAGE_ARTIFACT }}

  codecov:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Codecov binary
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov

      # Sanity check
      - run: 'echo Coverage Artifact: ${{ needs.test.outputs.COVERAGE_ARTIFACT }}'

      # CI ARTIFACTS - Download ##
      - name: Download Code Coverage Reports - Artifacts
        uses: actions/download-artifact@v3
        with:
          # Artifact reference name (aka key) to download
          name: ${{ needs.test.outputs.COVERAGE_ARTIFACT }}
          # Host local path to download the Artifact to
          # path: coverage
      - run: ls -ltra
      - run: ls -ltra coverage
      ## CODECOV ##
      - name: Upload Coverage Reports to Codecov
        env:
          OS_NAME: 'linux'
          NODEJS: '18'
        run: |
          for file in ./coverage/clover*.xml; do
            ./codecov -f $file -e "OS=$OS_NAME,NODE=$NODEJS" --flags unittests --verbose
            echo "Sent to Codecov: $file !"
          done


  lint:
    needs: pipe_config
    if: needs.pipe_config.outputs.LINT_ON == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # package provides dockerized headless eslint check, and a make frontend target

      - run: echo ESLINT_IMAGE_NAME="eslint-image" >> $GITHUB_ENV

      - name: Build Docker Image for running Lint
        run: "docker build -f Dockerfile.build --target eslint -t ${ESLINT_IMAGE_NAME} ."

        # run: make eslint
      - name: Run ESlint against all code
        run: |
          eslint_pass_boolean_flag=1

          # set flag to 0 if eslint fails
          docker run -t --rm ${ESLINT_IMAGE_NAME} || eslint_pass_boolean_flag=0
          # make eslint || eslint_pass_boolean_flag=0

          if [ $eslint_pass_boolean_flag -eq 1 ]; then
            echo "[INFO] Code Lint PASSED!"
          else
            echo "[ERROR] Code Lint FAILED!"
          fi

          if [ $eslint_pass_boolean_flag -eq 1 ]; then
            job_status=0
          else
            if [ ${{ needs.pipe_config.outputs.ALLOW_lINT_TO_FAIL }} == "true" ]; then
              echo "[WARN] Lint failed but ALLOW_lINT_TO_FAIL is true"
              job_status=0
            else
              echo "[ERROR] Lint failed and ALLOW_lINT_TO_FAIL is false"
              job_status=1
            fi
          fi
          echo "Exiting with status code: $job_status"
          exit $job_status
