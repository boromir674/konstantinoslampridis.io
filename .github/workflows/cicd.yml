# CI/CD Pipeline for Gatsby/TS project, in GitHub Actions

# Test -> Build -> Deploy

# Triggers
on:
  push:
    branches:
      - "*"
    # we use release branch for semver/changelog updates and deploying 'rc' tags
    # thus we filter out events for branch 'release', to NOT trigger
      - "!release"
    tags:
      - v*

jobs:
# CONFIGURE PIPELINE - to allow git-tracked logic for Jobs if/when to run
# note: if in Jobs here, cannot access env context (can the vars)
# can retire this Job if all ifs leverage vars for reading Top-Level overrides
  pipe:
    uses: ./.github/workflows/pipe_config.yml
    with:
      ALLOW_LINT_TO_FAIL: true

      ##### OVERRIDE SWITCHES #####
      # true gurantees Job run, false gurantees Job NOT run

      # OVERRIDE_UNIT_TESTS: false  # shutdown unit-tests
      # OVERRIDE_LINT: false  # shutdown lint
      # OVERRIDE_BUILD: true  # force build
      # OVERRIDE_LIGHTHOUSE: true  # force lighthouse
      # OVERRIDE_DEPLOY: true  # force deployment
      # OVERRIDE_E2E_TESTS: false  # shutdown unit-tests

      #############################

### UNIT TEST ###
  test:
    needs: pipe
    if: always() && ( needs.pipe.outputs.OVERRIDE_UNIT_TESTS == 'true' || ( needs.pipe.outputs.OVERRIDE_UNIT_TESTS == '' && needs.pipe.result == 'success' ) )
    uses: ./.github/workflows/test.yml
    with:
      pipe_config: ${{ toJson(needs.pipe.outputs) }}

# HOST COVERAGE Results
  codecov:
    needs: test
    uses: ./.github/workflows/codecov.yml
    # as long as test was triggered, we run codecov. both when Test PASSed or FAILed
    if: always() && ${{ !contains(fromJSON('["skipped", "cancelled"]'), needs.test.result) }}
    with:
      coverage_ci_artifact: ${{ needs.test.outputs.COVERAGE_ARTIFACT }}
      file_prefix: clover
    secrets:
      # leverages repository secret CODECOV_TOKEN
      CODECOV_TOKEN: ${{ secrets.DOCKER_PASSWORD }}

  lint:
    needs: pipe
    if: always() && ( needs.pipe.outputs.OVERRIDE_LINT == 'true' || ( needs.pipe.outputs.OVERRIDE_LINT == '' && needs.pipe.result == 'success' ) )
    uses: ./.github/workflows/lint.yml
    with:
      pipe_config: '{"ALLOW_LINT_TO_FAIL": "${{ needs.pipe.outputs.ALLOW_LINT_TO_FAIL }}"}'

## BUILD MINIFIED BUNDLE
  gatsby:
    needs: pipe
    if: always() && ( needs.pipe.outputs.OVERRIDE_BUILD == 'true' || ( needs.pipe.outputs.OVERRIDE_BUILD == '' && ( needs.pipe.outputs.OVERRIDE_DEPLOY == 'true' || needs.pipe.result == 'success' ) ) )
    # TODO rename as below, for current solutoin to have better semantics
    # if: always() && ( needs.pipe.outputs.FORCE_BUILD == 'true' || ( needs.pipe.outputs.FORCE_BUILD == '' && needs.test.result == 'success' ) )

    # ALT SOLUTION:
    # if: always() && needs.pipe.outputs.BUILD_ON == 'true' \
    #  && ( needs.pipe.outputs.FORCE_BUILD == 'true' || needs.test.result == 'success' )

    # TODO: support different logic: allow Pass, and allow Skipped policies

    uses: ./.github/workflows/build-bundle.yml
    with:
      ci_artifact: web_bundle

# LIGHTHOUSE CI
  audit:
    needs: gatsby
    if: always() && ( needs.pipe.outputs.OVERRIDE_LIGHTHOUSE == 'true' || ( needs.pipe.outputs.OVERRIDE_LIGHTHOUSE == '' && success() ) )
    uses: ./.github/workflows/lighthouse.yml
    with:
      target_ci_artifact: web_bundle
      # target_url: 'https://konstantinoslampridis.io'

### E2E TEST ###
  e2e:
    needs: gatsby
    if: always() && ( needs.pipe.outputs.OVERRIDE_E2E_TESTS == 'true' || ( needs.pipe.outputs.OVERRIDE_E2E_TESTS == '' && success() ) )
    uses: ./.github/workflows/e2e-test.yml
    with:
      website_artifact: web_bundle

# Test Web Bundle
  test_bundle:
    needs: gatsby
    # allow running regardless of gatsby's 'needs' !
    if: always() && needs.gatsby.result == 'success'
    uses: ./.github/workflows/test-bundle.yml
    with:
      bundle_ci_artifact: web_bundle
      # expectations for assertions
      expected_number_of_files: 37
      bundle_size: ${{ needs.gatsby.outputs.BUNDLE_SIZE }}
      # other test data
      bundle_size_acceptance: 2.3

  signal_deploy:
    needs: [test_bundle, e2e, test, audit]
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    uses: ./.github/workflows/signal-deploy.yml
    with:
      main_branch: main
      release_branch: release

  # Deploy Web Bundle
  deploy:
    # if DEPLOY_ON override boolean switch is set:
    # - true  --> Deployment WILL happen
    # - false --> Deployment will NOT happen

    # if boolean switch NOT SET then implicit default policy condition must be met:
    # - previous Jobs must succeed and signal_deploy.outputs.AUTOMATED_DEPLOY == 'true'
    needs: [signal_deploy]
    if: always() && ( needs.pipe.outputs.OVERRIDE_DEPLOY == 'true' || ( needs.pipe.outputs.OVERRIDE_DEPLOY == '' && needs.pipe.result == 'success' && needs.signal_deploy.outputs.AUTOMATED_DEPLOY == 'true' ) )

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    uses: ./.github/workflows/deploy.yml
    with:
      # map prod: s3 and test: github-pages
      environment: ${{ needs.signal_deploy.outputs.ENVIRONMENT_NAME == 'PROD_DEPLOYMENT' && 's3' || needs.signal_deploy.outputs.ENVIRONMENT_NAME == 'TEST_DEPLOYMENT' && 'github-pages' || 'unsupported-environment' }}
      website_artifact: web_bundle
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
