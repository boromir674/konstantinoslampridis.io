# CI/CD Pipeline for Gatsby/TS project, in GitHub Actions

# Test -> Build -> Deploy

# Triggers
on:
  push:
    branches:
      - "*"
    tags:
      - v*

env:

  ##### JOB ON/OFF SWITCHES - Top Level overrides #####
  UNIT_TESTS_ON: "false"
  LINT_ON: "false"
  BUILD_ON: "false"
  PUBLISH_ON: "true"
  DEPLOY_ON: "true"
  ##########################

  #### 2nd Level overrides ####
  ALWAYS_LINT: "false"
  ALWAYS_BUILD: "false"

  ## Pipe Settings ##
  ALLOW_lINT_TO_FAIL: "true"

jobs:
  pipe_config:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Pipeline
        id: set_pipe_config
        run: |
          echo UNIT_TESTS_ON="${{ env.UNIT_TESTS_ON }}" >> $GITHUB_OUTPUT
          echo LINT_ON="${{ env.LINT_ON }}" >> $GITHUB_OUTPUT
          echo PUBLISH_ON="${{ env.PUBLISH_ON }}" >> $GITHUB_OUTPUT
          echo ALLOW_lINT_TO_FAIL="${{ env.ALLOW_lINT_TO_FAIL }}" >> $GITHUB_OUTPUT
          echo DEPLOY_ON="${{ env.DEPLOY_ON }}" >> $GITHUB_OUTPUT
    outputs:
      # Output Top Level overides
      UNIT_TESTS_ON: ${{ steps.set_pipe_config.outputs.UNIT_TESTS_ON }}
      LINT_ON: ${{ steps.set_pipe_config.outputs.LINT_ON }}
      PUBLISH_ON: ${{ steps.set_pipe_config.outputs.PUBLISH_ON }}
      DEPLOY_ON: ${{ steps.set_pipe_config.outputs.DEPLOY_ON }}

      # Pipeline Configuration
      ALLOW_lINT_TO_FAIL: ${{ steps.set_pipe_config.outputs.ALLOW_lINT_TO_FAIL }}

### TEST ###
  test:
    needs: pipe_config
    if: needs.pipe_config.outputs.UNIT_TESTS_ON == 'true'
    uses: ./.github/workflows/test.yml
    with:
      pipe_config: ${{ toJson(needs.pipe_config.outputs) }}

  # e2e:
  # https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml

# COVERAGE HOST
  codecov:
    needs: test
    uses: ./.github/workflows/codecov.yml
    # as long as test was triggered, we run codecov. both when Test PASSed or FAILed
    if: always() && ${{ !contains(fromJSON('["skipped", "cancelled"]'), needs.test.result) }}
    with:
      coverage_ci_artifact: ${{ needs.test.outputs.COVERAGE_ARTIFACT }}
      file_prefix: clover
    secrets:
      # leverages repository secret CODECOV_TOKEN
      CODECOV_TOKEN: ${{ secrets.DOCKER_PASSWORD }}

## BUILD MINIFIED BUNDLE
  build:
    # needs: [test]
    uses: ./.github/workflows/build-bundle.yml
    if: always()
    with:
      ci_artifact: web_bundle

# Test Web Bundle
  test_bundle:
    needs: build
    uses: ./.github/workflows/test-bundle.yml
    with:
      bundle_ci_artifact: web_bundle
      bundle_size: ${{ needs.build.outputs.BUNDLE_SIZE }}
      bundle_size_acceptance: 3

  signal_deploy:
    needs: test_bundle
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    uses: ./.github/workflows/signal-deploy.yml
    with:
      main_branch: main
      release_branch: release

  # Deploy Web Bundle
  deploy:
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # runs if test_bundle ran and passed AND git ref is v* tag
    needs: [pipe_config, signal_deploy]
    if: ${{ needs.pipe_config.outputs.DEPLOY_ON == 'true' && needs.signal_deploy.outputs.AUTOMATED_DEPLOY == 'true' }}
    uses: ./.github/workflows/gh-pages.yml
    with:
      # map prod: s3 and test: github-apges
      # environment: '${{ needs.signal_deploy.outputs.ENVIRONMENT_NAME == PROD_DEPLOYMENT && 's3' || needs.signal_deploy.outputs.ENVIRONMENT_NAME == 'TEST_DEPLOYMENT' && 'github-pages' || needs.signal_deploy.outputs.ENVIRONMENT_NAME}}'
      # pass environment name as it
      environment: ${{ needs.signal_deploy.outputs.ENVIRONMENT_NAME }}
      website_artifact: web_bundle
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}


  lint:
    needs: pipe_config
    if: needs.pipe_config.outputs.LINT_ON == 'true'
    uses: ./.github/workflows/lint.yml
    with:
      pipe_config: '{"ALLOW_lINT_TO_FAIL": "${{ needs.pipe_config.outputs.ALLOW_lINT_TO_FAIL }}"}'




  # test_dockerized:
  #   # needs caching to compete in speed with setup-node cache
  #   # INVESTIGATE how to combine cache and docker images
