# CI/CD Pipeline for Gatsby/TS project, in GitHub Actions

# Test -> Build -> Deploy

# Triggers
on:
  push:
    branches:
      - "*"
    tags:
      - v*

env:

  ##### JOB ON/OFF SWITCHES - Top Level overrides #####
  UNIT_TESTS_ON: "true"
  LINT_ON: "true"
  PUBLISH_ON: "true"
  ##########################

  #### 2nd Level overrides ####
  ALWAYS_LINT: "false"

  ## Pipe Settings ##
  ALLOW_lINT_TO_FAIL: "true"

jobs:
  pipe_config:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Pipeline
        id: set_pipe_config
        run: |
          echo UNIT_TESTS_ON="${{ env.UNIT_TESTS_ON }}" >> $GITHUB_OUTPUT
          echo LINT_ON="${{ env.LINT_ON }}" >> $GITHUB_OUTPUT
          echo PUBLISH_ON="${{ env.PUBLISH_ON }}" >> $GITHUB_OUTPUT
          echo ALLOW_lINT_TO_FAIL="${{ env.ALLOW_lINT_TO_FAIL }}" >> $GITHUB_OUTPUT
    outputs:
      # Output Top Level overides
      UNIT_TESTS_ON: ${{ steps.set_pipe_config.outputs.UNIT_TESTS_ON }}
      LINT_ON: ${{ steps.set_pipe_config.outputs.LINT_ON }}
      PUBLISH_ON: ${{ steps.set_pipe_config.outputs.PUBLISH_ON }}

      # Pipeline Configuration
      ALLOW_lINT_TO_FAIL: ${{ steps.set_pipe_config.outputs.ALLOW_lINT_TO_FAIL }}

  test:
    needs: pipe_config
    # if: needs.pipe_config.outputs.UNIT_TESTS_ON == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: echo TEST_IMAGE_NAME="test-image" >> $GITHUB_ENV

      # package provides dockerized headless test, and a make frontend target
      - name: Build Docker Image for running Tests
        run: docker build -f Dockerfile.build --target test -t ${TEST_IMAGE_NAME} .

      - name: Run Unit Tests
        # run: make test
        run: docker run -t --rm -v /data/repos/static-site-generator/coverage:/app/coverage -v /data/repos/static-site-generator/__tests__:/app/__tests__ ${TEST_IMAGE_NAME}

  lint:
    needs: pipe_config
    if: needs.pipe_config.outputs.LINT_ON == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # package provides dockerized headless eslint check, and a make frontend target

      - run: echo ESLINT_IMAGE_NAME="eslint-image" >> $GITHUB_ENV

      - name: Build Docker Image for running Lint
        run: "docker build -f Dockerfile.build --target eslint -t ${ESLINT_IMAGE_NAME} ."

        # run: make eslint
      - name: Run ESlint against all code
        run: |
          eslint_pass_boolean_flag=1

          # set flag to 0 if eslint fails
          docker run --rm ${ESLINT_IMAGE_NAME} || eslint_pass_boolean_flag=0
          # make eslint || eslint_pass_boolean_flag=0

          if [ $eslint_pass_boolean_flag -eq 1 ]; then
            echo "[INFO] Code Lint PASSED!"
          else
            echo "[ERROR] Code Lint FAILED!"
          fi

          if [ $eslint_pass_boolean_flag -eq 1 ]; then
            job_status=0
          else
            if [ ${{ needs.pipe_config.outputs.ALLOW_lINT_TO_FAIL }} == "true" ]; then
              echo "[WARN] Lint failed but ALLOW_lINT_TO_FAIL is true"
              job_status=0
            else
              echo "[ERROR] Lint failed and ALLOW_lINT_TO_FAIL is false"
              job_status=1
            fi
          fi
          echo "Exiting with status code: $job_status"
          exit $job_status
